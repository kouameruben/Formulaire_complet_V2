shiny::runApp('complet_v2')
install.packages("googlesheets4")
gs4_auth()
library(googlesheets4)
gs4_auth()
gs4_auth(path = "token.rds")
saveRDS(token, file = "token.rds")
token <- gs4_token()
saveRDS(token, file = "token.rds")
shiny::runApp('complet_v2')
gs4_auth(path = "token.rds")
token <-gs4_auth()
saveRDS(token, file = "token.rds")
gs4_auth(path = "token.rds")
my_token <- readRDS("token.rds")
gs4_auth(token = my_token)
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
token <- readRDS("~/RAPPORT/IUA_consulting/Projet_nalan/Formulaire_complet_V2/token.rds")
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
shiny::runApp('complet_v2')
install.packages("utf8")
runApp('complet_v2')
runApp('complet_v2')
str(read_csv("questionnaire_clients.csv"))
runApp('complet_v2')
library(DBI)
library(RSQLite)
library(pool)
# Crée ou ouvre la base SQLite avec pool
pool <- dbPool(
drv         = RSQLite::SQLite(),
dbname      = "app_data.sqlite",
synchronous = "normal",
timeout     = 5000L
)
# Mode WAL pour performance/concurrence et clés étrangères
dbExecute(pool, "PRAGMA journal_mode = WAL;")
dbExecute(pool, "PRAGMA foreign_keys = ON;")
library(DBI)
library(RSQLite)
library(pool)
# Crée ou ouvre la base SQLite avec pool
pool <- dbPool(
drv         = RSQLite::SQLite(),
dbname      = "bd_fatal_projet2.sqlite",
synchronous = "normal",
timeout     = 5000L
)
# Mode WAL pour performance/concurrence et clés étrangères
dbExecute(pool, "PRAGMA journal_mode = WAL;")
dbExecute(pool, "PRAGMA foreign_keys = ON;")
db_file <- "complet_v2/bd_fatal_projet2.sqlite"
pool <- dbPool(
drv         = RSQLite::SQLite(),
dbname      = db_file,
synchronous = "normal",
timeout =5000L
)
library(DBI)
library(RSQLite)
library(pool)
pool <- dbPool(
drv         = RSQLite::SQLite(),
dbname      = db_file,
synchronous = "normal",
timeout =5000L
)
dbExecute(pool,
"CREATE TABLE IF NOT EXISTS clients (
customer_id      TEXT PRIMARY KEY,
name             TEXT NOT NULL,
prenom           TEXT,
email            TEXT,
numero           TEXT NOT NULL,
pays             TEXT,
ville            TEXT,
quartier         TEXT,
adresse_livraison TEXT,
preferences      TEXT,
date_enregistrement DATE
);"
)
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
test =dbGetQuery(pool, "SELECT * FROM clients;")
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
?poolWithTransaction
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
dbExecute(pool, "
CREATE TABLE IF NOT EXISTS produits (
id            INTEGER PRIMARY KEY AUTOINCREMENT,
supplier_id   INTEGER,
nom           TEXT,
categorie     TEXT,
description   TEXT,
couleur       TEXT,
prix_achat    REAL,
marque        TEXT,
volume        REAL,
poids         REAL,
materiau      TEXT,
date_ajout    DATE,
image_path    TEXT,
FOREIGN KEY(supplier_id) REFERENCES fournisseurs(id)
);
")
init_db(pool)
dbExecute(pool, "
CREATE TABLE IF NOT EXISTS produits (
id            INTEGER PRIMARY KEY AUTOINCREMENT,
supplier_id   INTEGER,
nom           TEXT,
categorie     TEXT,
description   TEXT,
couleur       TEXT,
prix_achat    REAL,
marque        TEXT,
volume        REAL,
poids         REAL,
materiau      TEXT,
date_ajout    DATE,
image_path    TEXT,
FOREIGN KEY(supplier_id) REFERENCES fournisseurs(id)
);
")
db_file <- "complet_v2/bd_fatal_projet2.sqlite"
pool <- dbPool(
drv         = RSQLite::SQLite(),
dbname      = db_file,
synchronous = "normal",
timeout =5000L
)
dbExecute(pool,
"CREATE TABLE IF NOT EXISTS clients (
customer_id      TEXT PRIMARY KEY,
name             TEXT NOT NULL,
prenom           TEXT,
email            TEXT,
numero           TEXT NOT NULL,
pays             TEXT,
ville            TEXT,
quartier         TEXT,
adresse_livraison TEXT,
preferences      TEXT,
date_enregistrement DATE
);"
)
dbExecute(pool, "
CREATE TABLE IF NOT EXISTS fournisseurs (
id              INTEGER PRIMARY KEY AUTOINCREMENT,
nom             TEXT    NOT NULL,
email           TEXT,
telephone       TEXT,
pays            TEXT,
type            TEXT,
adresse         TEXT,
site            TEXT,
responsable     TEXT,
contact         TEXT,
statut          TEXT,
date_crea       DATE
);
")
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
year <- as.integer(2025)
year
month <- as.integer(01)
days <- seq.Date(from = as.Date(sprintf("%04d-%02d-01", year, month)),
to   = as.Date(sprintf("%04d-%02d-%02d", year, month,
lubridate::days_in_month(as.Date(sprintf("%04d-%02d-01", year, month)))))
)
days
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
dbExecute(pool,
"INSERT INTO clients (
customer_id, name, prenom, email, numero,
pays, ville, quartier,
adresse_livraison, preferences, date_enregistrement
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);",
params = params
)
observeEvent(input$submit, {
req(input$name, input$numero)
if (nzchar(input$email) &&
!grepl("^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$", input$email)) {
shinyalert("Email invalide", type = "error"); return()
}
new_id <- paste0(sample(c(0:9, LETTERS), 7, TRUE), collapse = "")
params <- list(
new_id, input$name, input$prenom, input$email, input$numero,
input$pays, input$ville, input$quartier,
input$adresse, input$preferences, as.character(Sys.Date())
)
tryCatch({
dbWithTransaction(pool, {
dbExecute(pool,
"INSERT INTO clients (
customer_id, name, prenom, email, numero,
pays, ville, quartier,
adresse_livraison, preferences, date_enregistrement
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);",
params = params
)
})
# Mettre à jour le miroir en mémoire
df <- clients_df()
df <- bind_rows(df, tibble(
customer_id        = new_id,
name               = input$name,
prenom             = input$prenom,
email              = input$email,
numero             = input$numero,
pays               = input$pays,
ville              = input$ville,
quartier           = input$quartier,
adresse_livraison  = input$adresse,
preferences        = input$preferences,
date_enregistrement = Sys.Date()
))
clients_df(df)
shinyalert("Client ajouté !", type = "success")
# Reset des champs
updateTextInput(session, "name",   value = "")
updateTextInput(session, "prenom", value = "")
updateTextInput(session, "email",  value = "")
updateTextInput(session, "numero", value = "")
updateTextInput(session, "pays",   value = "")
updateTextInput(session, "ville",  value = "")
updateTextInput(session, "quartier", value = "")
updateTextAreaInput(session, "adresse",     value = "")
updateTextAreaInput(session, "preferences", value = "")
}, error = function(e) {
shinyalert(paste("Erreur :", e$message), type = "error")
})
})
# Chargement des bibliothÃ¨ques
library(shiny)
library(shinyalert)
library(shinyjs)
library(shinythemes)
library(shinycssloaders)
library(dplyr)
library(readr)
library(readxl)
library(DT)
library(openxlsx)
library(purrr)
library(rsconnect)
library(ggplot2)
library(DBI)
library(RSQLite)
library(pool)
# Crée ou ouvre la base SQLite avec pool
db_file <- "bd_fatal_projet2.sqlite"
pool <- dbPool(
drv         = RSQLite::SQLite(),
dbname      = db_file,
synchronous = "normal",
timeout     = 15000L
)
conn <- dbConnect(RSQLite::SQLite(), db_file)
# Mode WAL pour performance/concurrence et clés étrangÃ¨res
dbExecute(pool, "PRAGMA journal_mode = WAL;")
dbExecute(pool, "PRAGMA foreign_keys = ON;")
# Chargement des données géographiques
donnees_geographiques <- read_excel("worldcities.xlsx")
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
gc()
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
install.packages("sodium")
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
library(fs)
library(rmarkdown)
library(knitr)
dir_create("recus")
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
input       = "recu_template.Rmd"
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('copie_fonctionnelle.R')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
rmarkdown::render("recu_template.Rmd",
output_file = "test.pdf",
params = list(vente = vente_info))
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
hash <- password_store(mdp_raw)
mot_de_passe <- "admin123"
hash <- password_store(mdp_raw)
mdp_raw <- charToRaw(mot_de_passe)
hash <- password_store(mdp_raw)
password_store(mdp_raw)
password_store(charToRaw("admin123"))
password_store("admin123")
password_store("12345")
runApp('complet_v2')
runApp('complet_v2')
sodium::password_store(123)
sodium::password_store("12345")
sodium::password_store("admin12345")
runApp('complet_v2')
runApp('test')
runApp('complet_v2')
runApp('complet_v2')
shiny::runApp('complet_v2')
shiny::runApp('complet_v2')
runApp('complet_v2')
runApp('complet_v2')
